MSG_SIZE	taskqueue.c	22;"	d	file:
PROC_FS_MSG_MAX	taskqueue.c	23;"	d	file:
PROC_FS_MSGSIZE_MAX	taskqueue.c	24;"	d	file:
readIntFromFile	taskqueue.c	/^static int readIntFromFile(char *file, int *val) {$/;"	f	file:
sendToTaskQueue	taskqueue.c	/^int sendToTaskQueue(const mqd_t mqdes, const struct task task, $/;"	f
createTaskQueue	taskqueue.c	/^mqd_t createTaskQueue(const char *name, const unsigned int size){$/;"	f
receiveFromTaskQueue	taskqueue.c	/^struct task receiveFromTaskQueue(const mqd_t mqdes) {$/;"	f
closeTaskQueue	taskqueue.c	/^void closeTaskQueue(const mqd_t mqdes) {$/;"	f
destroyTaskQueue	taskqueue.c	/^void destroyTaskQueue(const char * name){$/;"	f
_TASKQUEUE_H	taskqueue.h	23;"	d
task	taskqueue.h	/^struct task {$/;"	s
routineForTask	taskqueue.h	/^   void (*routineForTask)(void *arg); $/;"	m	struct:task
arg	taskqueue.h	/^   void *arg;	$/;"	m	struct:task
createTaskQueue	taskqueue.h	/^extern mqd_t createTaskQueue(const char * name, const unsigned int size);$/;"	p
closeTaskQueue	taskqueue.h	/^extern void closeTaskQueue(const mqd_t mqdes);$/;"	p
destroyTaskQueue	taskqueue.h	/^extern void destroyTaskQueue(const char * name);$/;"	p
sendToTaskQueue	taskqueue.h	/^extern int sendToTaskQueue(const mqd_t mqdes, const struct task t, const unsigned int prio, bool blocking);$/;"	p
receiveFromTaskQueue	taskqueue.h	/^extern struct task receiveFromTaskQueue(const mqd_t mqdes);$/;"	p
getcharTimeout	getcharTimeout.c	/^int  getcharTimeout(unsigned int timeout) {$/;"	f
_GETCHARTIMEOUT_H	getcharTimeout.h	15;"	d
getcharTimeout	getcharTimeout.h	/^extern int  getcharTimeout(unsigned int timeout);$/;"	p
_MY_COLOR_H	my_color.h	10;"	d
RED	my_color.h	12;"	d
GRN	my_color.h	13;"	d
YEL	my_color.h	14;"	d
BLU	my_color.h	15;"	d
MAG	my_color.h	16;"	d
CYN	my_color.h	17;"	d
RESET	my_color.h	18;"	d
dummy	FIFO.c	/^Queue* dummy = NULL;$/;"	v
queue_init	FIFO.c	/^queue_init() {$/;"	f
queue_put	FIFO.c	/^queue_put(char newCharacter) {$/;"	f
queue_get	FIFO.c	/^queue_get(char *currChar) {$/;"	f
queue_clean	FIFO.c	/^queue_clean() {$/;"	f
_MY_ERROR_H	my_error.h	11;"	d
errorhandler	my_error.h	14;"	d
_FIFO_H	FIFO.h	13;"	d
PUFFER_SIZE	FIFO.h	16;"	d
queue	FIFO.h	/^typedef struct queue{$/;"	s
character	FIFO.h	/^    char character;$/;"	m	struct:queue
previous	FIFO.h	/^    struct queue *previous;$/;"	m	struct:queue	typeref:struct:queue::queue
Queue	FIFO.h	/^} Queue;$/;"	t	typeref:struct:queue
queue_init	FIFO.h	/^extern int queue_init(void);$/;"	p
queue_put	FIFO.h	/^extern int queue_put(char newCharacter);$/;"	p
queue_get	FIFO.h	/^extern int queue_get(char *currChar);$/;"	p
queue_clean	FIFO.h	/^extern int queue_clean(void);$/;"	p
_MY_MUTEX_H	my_mutex.h	10;"	d
my_init	my_mutex.h	/^extern int my_init (void);$/;"	p
my_producer	my_mutex.h	/^extern int my_producer (char character);$/;"	p
my_consumer	my_mutex.h	/^extern int my_consumer ();$/;"	p
my_clean	my_mutex.h	/^extern int my_clean (void);$/;"	p
CONSUMERTASKS	main.c	22;"	d	file:
PRODUCERTASKS	main.c	23;"	d	file:
ALPHABET_LENGHT	main.c	24;"	d	file:
SLEEP_CONSUMER	main.c	25;"	d	file:
SLEEP_PRODUCER	main.c	26;"	d	file:
thread_control	main.c	/^pthread_t thread_control;$/;"	v
consumerPool	main.c	/^struct threadpool * consumerPool;$/;"	v	typeref:struct:threadpool
producerPool	main.c	/^struct threadpool * producerPool;$/;"	v	typeref:struct:threadpool
producertasks	main.c	/^mqd_t producertasks;$/;"	v
consumertasks	main.c	/^mqd_t consumertasks;$/;"	v
count	main.c	/^int count = 0;$/;"	v
quit_task	main.c	/^quit_task () {$/;"	f
producer_task	main.c	/^producer_task (void * argument) {$/;"	f
consumer_task	main.c	/^consumer_task() {$/;"	f
control_thread	main.c	/^control_thread () {$/;"	f
main	main.c	/^main (void) {$/;"	f
semOccupied	my_mutex.c	/^sem_t semOccupied;$/;"	v
semFree	my_mutex.c	/^sem_t semFree;$/;"	v
cond	my_mutex.c	/^pthread_cond_t cond;$/;"	v
mutex	my_mutex.c	/^pthread_mutex_t mutex;$/;"	v
counter	my_mutex.c	/^int counter;$/;"	v
cleanup_handler	my_mutex.c	/^cleanup_handler (void * args) {$/;"	f	file:
my_init	my_mutex.c	/^my_init () {$/;"	f
my_producer	my_mutex.c	/^my_producer (char character) {$/;"	f
my_consumer	my_mutex.c	/^my_consumer() {$/;"	f
my_clean	my_mutex.c	/^my_clean () {$/;"	f
thpool_create	thpool.c	/^thpool_create(mqd_t taskqueue) {$/;"	f
thpool_add_task	thpool.c	/^thpool_add_task (struct threadpool * pool, struct task job, int prio) {$/;"	f
thpool_routine	thpool.c	/^thpool_routine(void * threadpool) {$/;"	f
thpool_destroy	thpool.c	/^thpool_destroy(struct threadpool * pool) {$/;"	f
thpool_free	thpool.c	/^thpool_free (struct threadpool * pool) {$/;"	f
_THPOOL_H	thpool.h	2;"	d
NUM_THREADS	thpool.h	7;"	d
NUM_TASKS	thpool.h	8;"	d
threadpool	thpool.h	/^struct threadpool {$/;"	s
mutex	thpool.h	/^    pthread_mutex_t mutex;$/;"	m	struct:threadpool
threads	thpool.h	/^    pthread_t * threads;$/;"	m	struct:threadpool
taskqueue	thpool.h	/^    mqd_t taskqueue;$/;"	m	struct:threadpool
thpool_create	thpool.h	/^extern struct threadpool* thpool_create(mqd_t taskqueue);$/;"	p
thpool_add_task	thpool.h	/^extern int thpool_add_task(struct threadpool * pool, struct task job, int prio);$/;"	p
thpool_routine	thpool.h	/^void * thpool_routine(void * threadpool);$/;"	p
thpool_destroy	thpool.h	/^extern int thpool_destroy(struct threadpool * pool);$/;"	p
thpool_free	thpool.h	/^extern int thpool_free(struct threadpool * pool);$/;"	p
